{% extends 'layouts/base.html.twig' %}

{% block title %}Deployment Logs - Aviyon{% endblock %}

{% block body %}
<div class="dashboard-container flex">
    {% include 'dashboard/sidebar.html.twig' %}
    <div class="main-content ml-64 p-6 w-full">
        <div class="container mx-auto px-4 py-6">
            <h1 class="text-4xl font-inter text-purple-600 mb-4">Deployment Logs</h1>
            <p class="text-gray-300 mb-8">
                View logs for your deployments in the Kodoverse. Every action—deploying a smart contract, launching a DApp, or managing virtual assets—is logged on our decentralized network for transparency and debugging.
            </p>

            <!-- Log Viewer -->
            <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl text-purple-400">Log Viewer</h2>
                    <input type="text" id="log-search" class="p-2 bg-gray-700 rounded text-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-500" placeholder="Search logs...">
                </div>
                <div id="log-container" class="h-96 overflow-y-auto bg-gray-900 p-4 rounded-lg text-gray-300"></div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', () => {
    const logContainer = document.getElementById('log-container');
    const logSearch = document.getElementById('log-search');

    // Mock log data
    const logs = [
        '[2025-04-29 08:00:01] INFO: Deploying NFT Marketplace smart contract...',
        '[2025-04-29 08:00:05] SUCCESS: Smart contract deployed at 0x123...',
        '[2025-04-29 08:01:12] ERROR: Failed to initialize DeFi App - Invalid credentials',
        '[2025-04-29 08:02:30] INFO: Virtual Gallery asset upload started...',
        '[2025-04-29 08:02:45] SUCCESS: Virtual Gallery asset uploaded successfully'
    ];

    // Function to render logs
    function renderLogs(filter = '') {
        logContainer.innerHTML = '';
        const filteredLogs = logs.filter(log => log.toLowerCase().includes(filter.toLowerCase()));
        filteredLogs.forEach(log => {
            const logEntry = document.createElement('div');
            logEntry.classList.add('mb-2');
            if (log.includes('ERROR')) logEntry.classList.add('text-red-400');
            else if (log.includes('SUCCESS')) logEntry.classList.add('text-green-400');
            else logEntry.classList.add('text-gray-300');
            logEntry.textContent = log;
            logContainer.appendChild(logEntry);
        });
        logContainer.scrollTop = logContainer.scrollHeight;
    }

    // Initial render
    renderLogs();

    // Search handler
    logSearch.addEventListener('input', () => {
        renderLogs(logSearch.value);
    });
});
</script>
{% endblock %}
