{% extends 'layouts/base.html.twig' %}

{% block title %}Deployments - Aviyon{% endblock %}

{% block body %}
<div class="dashboard-container flex">
    {% include 'dashboard/sidebar.html.twig' %}
    <div class="main-content ml-64 p-6 w-full">
        <div class="container mx-auto px-4 py-6">
            <h1 class="text-4xl font-inter text-purple-600 mb-4">Deployments</h1>
            <p class="text-gray-300 mb-8">
                Manage your deployments in the Kodoverse, a decentralized ecosystem where your Web3 applications, smart contracts, and virtual world assets are deployed on a distributed network. Nimbus AI ensures optimal deployment performance.
            </p>

            <!-- Deployments Table -->
            <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl text-purple-400">Your Deployments</h2>
                    <button id="new-deployment" class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition">New Deployment</button>
                </div>
                <table class="w-full text-gray-300">
                    <thead>
                        <tr class="border-b border-gray-700">
                            <th class="py-3 px-4 text-left">Project</th>
                            <th class="py-3 px-4 text-left">Type</th>
                            <th class="py-3 px-4 text-left">Status</th>
                            <th class="py-3 px-4 text-left">Last Updated</th>
                            <th class="py-3 px-4 text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="deployments-table">
                        <!-- Placeholder data will be populated by JS -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', () => {
    const deploymentsTable = document.getElementById('deployments-table');
    const newDeploymentBtn = document.getElementById('new-deployment');

    // Mock deployments data
    const deployments = [
        { id: 1, project: 'NFT Marketplace', type: 'Smart Contract', status: 'Running', lastUpdated: '2025-04-28 14:32' },
        { id: 2, project: 'DeFi App', type: 'DApp', status: 'Stopped', lastUpdated: '2025-04-27 09:15' },
        { id: 3, project: 'Virtual Gallery', type: 'Virtual Asset', status: 'Deploying', lastUpdated: '2025-04-29 08:00' }
    ];

    // Function to render deployments
    function renderDeployments() {
        deploymentsTable.innerHTML = '';
        deployments.forEach(deployment => {
            const row = document.createElement('tr');
            row.classList.add('border-b', 'border-gray-700');
            row.innerHTML = `
                <td class="py-3 px-4">${deployment.project}</td>
                <td class="py-3 px-4">${deployment.type}</td>
                <td class="py-3 px-4">
                    <span class="${deployment.status === 'Running' ? 'text-green-400' : deployment.status === 'Stopped' ? 'text-red-400' : 'text-yellow-400'}">
                        ${deployment.status}
                    </span>
                </td>
                <td class="py-3 px-4">${deployment.lastUpdated}</td>
                <td class="py-3 px-4">
                    <button data-id="${deployment.id}" class="action-btn bg-purple-500 text-white px-3 py-1 rounded-lg hover:bg-purple-600 transition mr-2">
                        ${deployment.status === 'Running' ? 'Stop' : 'Start'}
                    </button>
                    <button data-id="${deployment.id}" class="delete-btn bg-red-500 text-white px-3 py-1 rounded-lg hover:bg-red-600 transition">
                        Delete
                    </button>
                </td>
            `;
            deploymentsTable.appendChild(row);
        });
    }

    // Initial render
    renderDeployments();

    // New deployment handler
    newDeploymentBtn.addEventListener('click', () => {
        const projectName = prompt('Enter project name for the new deployment:');
        if (projectName) {
            deployments.push({
                id: deployments.length + 1,
                project: projectName,
                type: 'DApp',
                status: 'Deploying',
                lastUpdated: new Date().toISOString().slice(0, 16).replace('T', ' ')
            });
            renderDeployments();
        }
    });

    // Action buttons handler
    deploymentsTable.addEventListener('click', (e) => {
        const btn = e.target;
        const id = parseInt(btn.dataset.id);

        if (btn.classList.contains('action-btn')) {
            const deployment = deployments.find(d => d.id === id);
            deployment.status = deployment.status === 'Running' ? 'Stopped' : 'Running';
            deployment.lastUpdated = new Date().toISOString().slice(0, 16).replace('T', ' ');
            renderDeployments();
        }

        if (btn.classList.contains('delete-btn')) {
            if (confirm('Are you sure you want to delete this deployment?')) {
                const index = deployments.findIndex(d => d.id === id);
                deployments.splice(index, 1);
                renderDeployments();
            }
        }
    });
});
</script>
{% endblock %}
