{% extends 'layouts/base.html.twig' %}

{% block title %}Kodoverse Users - Elite Innovators{% endblock %}

{% block styles %}
    <link rel="stylesheet" href="{{ asset('build/css/base.css') }}">
    <style>
        .animate-fade-in {
            animation: fadeIn 1s ease-in;
        }
        .animate-slide-up {
            animation: slideUp 0.8s ease-out;
        }
        @keyframes fadeIn {
            0% { opacity: 0; transform: translateY(20px); }
            100% { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideUp {
            0% { opacity: 0; transform: translateY(30px); }
            100% { opacity: 1; transform: translateY(0); }
        }
    </style>
{% endblock %}

{% block body %}
<div class="relative bg-gray-900 text-white min-h-screen font-inter overflow-hidden">
    <!-- Subtle Neural Network Background -->
    <div class="absolute inset-0 z-0 opacity-10">
        <canvas id="neural-canvas" class="w-full h-full"></canvas>
    </div>

    <!-- Users Section -->
    <section class="py-20 px-6 md:px-12 z-10">
        <div class="container mx-auto">
            <h2 class="text-4xl md:text-5xl font-bold text-center text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-indigo-600 mb-12 animate-slide-up">Kodoverse Innovators</h2>
            <p class="text-lg text-gray-200 mb-10 text-center max-w-3xl mx-auto animate-fade-in">Explore the brilliant minds shaping the Kodoverse with cutting-edge innovation and expertise.</p>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10">
                {% for user in users %}
                    <a href="{{ path('user_profile', {'username': user.username}) }}" class="bg-gray-800 p-6 rounded-xl shadow-lg hover:shadow-xl transition transform hover:-translate-y-2 animate-fade-in border border-purple-500/30 team-member">
                        <img src="{{ asset('build/images/' ~ user.username ~ '.jpg') }}" alt="{{ user.username }}" class="w-32 h-32 rounded-full mx-auto mb-4 border-4 border-indigo-600">
                        <h3 class="text-2xl font-semibold text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-indigo-600 text-center mb-2">{{ user.username }}</h3>
                        <p class="text-gray-200 text-center font-semibold">{{ user.title }}</p>
                        <p class="text-gray-300 text-center">{{ user.description }}</p>
                    </a>
                {% endfor %}
            </div>
        </div>
    </section>

    <!-- Profile Card Modal -->
    <div id="profile-card-modal" class="fixed inset-0 bg-black/80 hidden z-50 flex items-center justify-center">
        <div class="bg-gray-800 p-8 rounded-xl shadow-xl w-11/12 md:w-2/3 lg:w-1/2 max-h-[90vh] overflow-y-auto border border-purple-500/30">
            <button id="close-modal" class="absolute top-4 right-4 text-gray-200 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
            <div id="profile-card-content" class="text-gray-200">
                <!-- Populated dynamically via JavaScript -->
            </div>
        </div>
    </div>

    <!-- Live Chat Widget -->
    <div id="live-chat" class="fixed bottom-4 right-4 z-40">
        <button id="chat-toggle" class="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-4 rounded-full shadow-lg hover:from-purple-700 hover:to-indigo-700 transition">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path></svg>
        </button>
        <div id="chat-window" class="hidden bg-gray-800 rounded-xl shadow-lg w-80 h-96 flex flex-col mt-2">
            <div class="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-4 rounded-t-xl flex justify-between items-center">
                <h3 class="text-lg font-semibold">Kodoverse Support</h3>
                <button id="chat-close" class="text-white hover:text-gray-300">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <div id="chat-messages" class="flex-1 p-4 overflow-y-auto"></div>
            <div class="p-4 border-t border-gray-700">
                <input id="chat-input" type="text" placeholder="Type your message..." class="w-full p-2 bg-gray-700 rounded-lg text-gray-200 focus:ring-2 focus:ring-indigo-600">
            </div>
        </div>
    </div>

    <!-- Inline JavaScript for Neural Network Background -->
    <script>
        const canvas = document.getElementById('neural-canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let particles = [];
        const particleCount = 40;

        class Particle {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.size = Math.random() * 1.5 + 0.5;
                this.speedX = Math.random() * 0.3 - 0.15;
                this.speedY = Math.random() * 0.3 - 0.15;
            }
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
                if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
            }
            draw() {
                ctx.fillStyle = 'rgba(139, 92, 246, 0.8)';
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }

        for (let i = 0; i < particleCount; i++) {
            particles.push(new Particle());
        }

        function animateNeural() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            particles.forEach(p => {
                p.update();
                p.draw();
                particles.forEach(p2 => {
                    const dx = p.x - p2.x;
                    const dy = p.y - p2.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    if (distance < 60) {
                        ctx.beginPath();
                        ctx.strokeStyle = `rgba(139, 92, 246, ${0.15 - distance / 400})`;
                        ctx.lineWidth = 0.8;
                        ctx.moveTo(p.x, p.y);
                        ctx.lineTo(p2.x, p2.y);
                        ctx.stroke();
                    }
                });
            });
            requestAnimationFrame(animateNeural);
        }
        animateNeural();

        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
    </script>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('build/pages/about/team.js') }}" defer></script>
{% endblock %}
